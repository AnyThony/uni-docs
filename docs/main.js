
        uni._rawComponents = {"info-component":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]}]},{"context":7,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<template>\n  <div class=\"navbar\">\n    {\n      // blah\n    }\n    ...\n  </div>\n</template>`);\n","children":[]}]},{"context":9,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":11,"closure":"","children":[]},{"context":13,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<body>\n  {\n    this.imports = [\"navbar\"];\n  }\n  <navbar></navbar>\n</body>`);\n","children":[]}]},{"context":15,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":17,"closure":"","children":[]},{"context":19,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<body>\n  {\n    this.imports = [\"navbar\"];\n    this.addComponent(\"navbar\");\n  }\n</body>`);\n","children":[]}]},{"context":21,"closure":"","children":[{"context":0,"closure":"","children":[]}]}]}]}]},"srcBuffer":"<template>\n  <div class=\"info-section info-component jumbotron jumbotron-fluid\">\n    <div class=\"container\">\n      <h1 class=\"display-4\">Components</h1>\n      <p class=\"lead\">Uni allows for splitting your views into components</p>\n      <p>Component files are automatically registered in the directory <b>src/components</b>.<br>The file name must be the desired component name. (In this case it&apos;s navbar.uni)</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>To use a component <b>this.imports must be declared with its name inside the parent element.</b></p>\n      <p>You can then declare a regular HTML element with its tagname:</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>Components can be added dynamically with <b>this.addComponent(name)</b>:</p>\n      <h2>addComponent(name, Optional[props])</h2>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p><b>addComponent</b> appends a new component as a child into the script context.</p>\n    </div>\n  </div>\n</template>"},"info-container":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"\n      this.imports = [\"info-setup\", \n                      \"info-scripting\", \n                      \"info-init\", \n                      \"info-component\",\n                      \"info-props\",\n                      \"info-state\"]\n    ","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[]},{"context":7,"closure":"","children":[]},{"context":9,"closure":"","children":[]},{"context":11,"closure":"","children":[]}]}]},"srcBuffer":"<template>\n  <div class=\"info-container\">\n    \n    <info-setup></info-setup>\n    <info-scripting></info-scripting>\n    <info-init></info-init>\n    <info-component></info-component>\n    <info-props></info-props>\n    <info-state></info-state>\n  </div>\n</template>"},"info-init":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[]},{"context":7,"closure":"","children":[]},{"context":9,"closure":"","children":[]},{"context":11,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.onFullLoad = () => {\n      // called after every descendant has loaded\n    }\n  }\n  ...\n</div>`);\n","children":[]}]},{"context":13,"closure":"","children":[]},{"context":15,"closure":"","children":[]},{"context":17,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.onChildLoad = (child) => {\n      console.log(child + \" has loaded\");\n      // called when a descendant loads\n    }\n  }\n  ...\n</div>`);\n","children":[]}]},{"context":19,"closure":"","children":[]}]}]}]},"srcBuffer":"<template>\n  <div class=\"info-section info-init jumbotron jumbotron-fluid\">\n    <div class=\"container\">\n      <h1 class=\"display-4\">Initialization Events</h1>\n      <p class=\"lead\">Uni runs scripts in the order of an execution tree</p>\n      <p>Every DOM element runs itself first then recurses on its children.</p>\n      <p>The following are events that can be assigned upon initialization:</p>\n      <h2>onFullLoad</h2>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>Assigning a callback to onFullLoad will call it once every descendent&apos;s script is ran.</p>\n      <h2>onChildLoad</h2>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>Assigning a callback to onChildLoad will call it everytime a child&apos;s script is ran passing the child itself.</p>\n    </div>\n</div></template>"},"info-props":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":5,"closure":"","children":[]},{"context":7,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<body>\n  {\n    this.imports = [\"navbar\"];\n  }\n  <navbar title=\"foo\"></navbar>\n</body>`);\n","children":[]}]},{"context":9,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":11,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<body>\n  {\n    this.imports = [\"navbar\"];\n    this.addComponent(\"navbar\", {title: \"foo\"});\n  }\n</body>`);\n","children":[]}]},{"context":13,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":15,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<template>\n  <div class=\"navbar\">\n    {\n      console.log(\"My title:\", this.props.title);\n    }\n  </div>\n</template>`);\n","children":[]}]}]}]}]},"srcBuffer":"<template>\n  <div class=\"info-section info-props jumbotron jumbotron-fluid\">\n    <div class=\"container\">\n      <h1 class=\"display-4\">Props</h1>\n      <p class=\"lead\">Data known as <b>props</b> can be passed to reusable components upon initialization.</p>\n      <p>For components initialized statically, props can be given through regular html attribute:</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>For components initialized dynamically, props can be given as an object through <b>addComponent</b>&apos;s second optional parameter.</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>    \n      <p>And finally, accessing props from the component end is done with <b>this.props</b>:</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre> \n    </div>\n  </div>\n</template>"},"info-scripting":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]}]},{"context":7,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.children[0].innerText += \"Polo!\";\n  }\n  <span id=\"foo\">Marco</span>\n</div>`);\n","children":[]}]},{"context":9,"closure":"","children":[]},{"context":11,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div id=\"parent\">\n  {\n    console.log(this.children[0].innerText);\n    // prints 'Foo'\n  }\n  <div id=\"child\">\n    Foo\n  </div>\n</div>`);\n","children":[]}]}]}]}]},"srcBuffer":"<template>\n  <div class=\"info-section info-scripting jumbotron jumbotron-fluid\">\n    <div class=\"container\">\n      <h1 class=\"display-4\">In-line Scripting</h1>\n      <p class=\"lead\">Inline-scripts run under its DOM element as context:</p>\n      <p>Note: Uni assigns the method <b>find</b> as an alias for <b>querySelector</b></p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>You also can traverse the DOM to read / modify other elements:</p>\n      <pre>        <code class=\"javascript html\">\n{\n$(this).text(`<div id=\"parent\">\n  {\n    console.log(this.children[0].innerText);\n    // prints &apos;Foo&apos;\n  }\n  <div id=\"child\">\n    Foo\n  </div>\n</div>`);\n}\n        </code>\n      </pre>\n    </div>\n  </div>\n</template>"},"info-setup":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":7,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":9,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":11,"closure":"","children":[]},{"context":13,"closure":"","children":[{"context":1,"closure":"","children":[]}]}]}]}]},"srcBuffer":"<template>\n    <div class=\"info-section info-setup jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n            <h1 class=\"display-4\">Setup</h1>\n            <p class=\"lead\">Uni is available to install as an npm package:</p>\n            <pre>          <code class=\"language-bash\">npm install -g uni-cmd</code>\n        </pre>\n            <p>A new project can then be created with the <b>init</b> command:</p>\n            <pre>          <code class=\"language-bash\">uni init Project_Name</code>\n        </pre>\n            <p>Inside a project directory, a dev environment with hot reload can be started:</p>\n            <pre>          <code class=\"language-bash\">npm run dev</code>\n        </pre>\n        </div>\n    </div>\n</template>"},"info-state":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":5,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.state = {foo: 2}\n  }\n</div>`);\n","children":[]}]},{"context":7,"closure":"","children":[]},{"context":9,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.state = {foo: 2}\n    this.bindState(newState => {\n      console.log(\"foo is \" + newState.foo);\n    });\n  }\n  ...\n</div>`);\n","children":[]}]},{"context":11,"closure":"","children":[]},{"context":13,"closure":"","children":[]},{"context":15,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.state = {foo: 2}\n    this.bindState(newState => {\n      console.log(\"foo is \" + newState.foo);\n    });\n    this.setState({foo: 3});\n  }\n  ...\n</div>`);\n","children":[]}]},{"context":17,"closure":"","children":[]},{"context":19,"closure":"","children":[]},{"context":21,"closure":"","children":[]},{"context":23,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div>\n  {\n    this.state = {foo: 2}\n    this.bindState(newState => {\n      console.log(\"foo is \" + newState.foo);\n    });\n  }\n  <div id=\"child\">\n    {\n      this.setState({foo: 3})\n    }\n  </div>\n</div>`);\n","children":[]}]},{"context":25,"closure":"","children":[]},{"context":27,"closure":"","children":[{"context":1,"closure":"\n$(this).text(`<div id=\"ancestor\">\n  {\n    this.state = {foo: 2}\n    this.bindState(newState => {\n      console.log(\"foo is \" + newState.foo);\n    });\n  }\n  <div id=\"child\">\n    {\n      this.state = {bar: 3}\n      this.bindState(newState => {\n        console.log(\"bar is \" + newState.bar);\n      }); \n    }\n    <div id=\"descendant\">\n      {\n        this.setState({foo: 3, bar: 4});\n      }\n    </div>\n  </div>\n</div>`);\n","children":[]}]}]}]}]},"srcBuffer":"<template>\n  <div class=\"info-section info-state jumbotron jumbotron-fluid\">\n    <div class=\"container\">\n      <h1 class=\"display-4\">State Management</h1>\n      <p>Declaring an initial state must be done on <b>this.state:</b></p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <h2>bindState(callback)</h2>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>The callback passed to bindState will be called once initially then upon any state changes from setState thereafter.</p>\n      <h2>setState(object)</h2>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>The callback passed to bindState will be called once initially then upon any state changes from setState.</p>\n      <h3>State methods within descendants</h3>\n      <p>Descendants that have ancestor(s) with a defined initial state(s) can use these methods:</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n      <p>Descendants can setState to multiple ancestors with differing state attributes:</p>\n      <pre>        <code class=\"javascript html\">\n\n        </code>\n      </pre>\n    </div>\n</div></template>"},"navbar":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"\n      console.log(this.className + \" has loaded.\")\n    ","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[{"context":1,"closure":"","children":[]}]},{"context":5,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"","children":[]}]}]}]}]}]},"srcBuffer":"<template>\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    \n    <a class=\"navbar-brand\" href=\"#\">Uni</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n      <div class=\"navbar-nav\">\n        <a class=\"nav-item nav-link active\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\n      </div>\n    </div>\n  </nav>\n</template>"},"sidebar":{"execTree":{"context":0,"closure":"","children":[{"context":1,"closure":"","children":[{"context":1,"closure":"\n        this.state = {\n          select: 0\n        };\n\n        function onChildClick(event){\n          var child = event.srcElement;\n          this.setState({\n            select: child.getAttribute(\"select\")\n          });\n          $(\".\"+child.getAttribute(\"info\"))[0].scrollIntoView({\n            behavior: \"smooth\"\n          });\n        }\n\n        this.onFullLoad = () => {\n          for (var i = 0; i < this.children.length; i++){\n            var child = this.children[i];\n            child.setAttribute(\"select\", i);\n            child.onclick = onChildClick.bind(this)\n          };\n        };\n\n        this.bindState(newState => {\n          var old = this.state.select;\n          this.children[old].classList.remove(\"active\");\n          this.children[newState.select].classList.add(\"active\");\n        });\n      ","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[]},{"context":7,"closure":"","children":[]},{"context":9,"closure":"","children":[]},{"context":11,"closure":"","children":[]}]}]}]},"srcBuffer":"<template>\n  <div>\n    <ul class=\"list-group sidebar\">\n      \n      <li class=\"list-group-item active\" info=\"info-setup\">Setup</li>\n      <li class=\"list-group-item\" info=\"info-scripting\">In-line Scripting</li>\n      <li class=\"list-group-item\" info=\"info-init\">Initializaiton Events</li>\n      <li class=\"list-group-item\" info=\"info-component\">Components</li>\n      <li class=\"list-group-item\" info=\"info-props\">Props</li>\n      <li class=\"list-group-item\" info=\"info-state\">State Management</li>\n    </ul>\n  </div>\n</template>"}};
    const execTree = {"context":"document.body","closure":"\n        console.log(this.tagName, \"loaded.\"); \n        this.imports = [\"navbar\", \"sidebar\", \"info-container\"]; \n    ","children":[{"context":1,"closure":"","children":[]},{"context":3,"closure":"","children":[]},{"context":5,"closure":"","children":[]}]};
    uni._evalExecTree(execTree, document.body);
    